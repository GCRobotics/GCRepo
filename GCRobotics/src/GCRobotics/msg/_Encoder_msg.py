"""autogenerated by genpy from GCRobotics/Encoder_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Encoder_msg(genpy.Message):
  _md5sum = "1f3c9338c8adf9eef290f5ae7c5d32ec"
  _type = "GCRobotics/Encoder_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 encoder1
float64 encoder2
float64 encoder3
float64 encoder4

bool direction1
bool direction2
bool direction3
bool direction4

"""
  __slots__ = ['encoder1','encoder2','encoder3','encoder4','direction1','direction2','direction3','direction4']
  _slot_types = ['float64','float64','float64','float64','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       encoder1,encoder2,encoder3,encoder4,direction1,direction2,direction3,direction4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Encoder_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.encoder1 is None:
        self.encoder1 = 0.
      if self.encoder2 is None:
        self.encoder2 = 0.
      if self.encoder3 is None:
        self.encoder3 = 0.
      if self.encoder4 is None:
        self.encoder4 = 0.
      if self.direction1 is None:
        self.direction1 = False
      if self.direction2 is None:
        self.direction2 = False
      if self.direction3 is None:
        self.direction3 = False
      if self.direction4 is None:
        self.direction4 = False
    else:
      self.encoder1 = 0.
      self.encoder2 = 0.
      self.encoder3 = 0.
      self.encoder4 = 0.
      self.direction1 = False
      self.direction2 = False
      self.direction3 = False
      self.direction4 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d4B.pack(_x.encoder1, _x.encoder2, _x.encoder3, _x.encoder4, _x.direction1, _x.direction2, _x.direction3, _x.direction4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.encoder1, _x.encoder2, _x.encoder3, _x.encoder4, _x.direction1, _x.direction2, _x.direction3, _x.direction4,) = _struct_4d4B.unpack(str[start:end])
      self.direction1 = bool(self.direction1)
      self.direction2 = bool(self.direction2)
      self.direction3 = bool(self.direction3)
      self.direction4 = bool(self.direction4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d4B.pack(_x.encoder1, _x.encoder2, _x.encoder3, _x.encoder4, _x.direction1, _x.direction2, _x.direction3, _x.direction4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.encoder1, _x.encoder2, _x.encoder3, _x.encoder4, _x.direction1, _x.direction2, _x.direction3, _x.direction4,) = _struct_4d4B.unpack(str[start:end])
      self.direction1 = bool(self.direction1)
      self.direction2 = bool(self.direction2)
      self.direction3 = bool(self.direction3)
      self.direction4 = bool(self.direction4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d4B = struct.Struct("<4d4B")
