/* Auto-generated by genmsg_cpp for file /home/gcr/GCRepo/GCRobotics/msg/Encoder_msg.msg */
#ifndef GCROBOTICS_MESSAGE_ENCODER_MSG_H
#define GCROBOTICS_MESSAGE_ENCODER_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace GCRobotics
{
template <class ContainerAllocator>
struct Encoder_msg_ {
  typedef Encoder_msg_<ContainerAllocator> Type;

  Encoder_msg_()
  : encoder1(0.0)
  , encoder2(0.0)
  , encoder3(0.0)
  , encoder4(0.0)
  , direction1(false)
  , direction2(false)
  , direction3(false)
  , direction4(false)
  {
  }

  Encoder_msg_(const ContainerAllocator& _alloc)
  : encoder1(0.0)
  , encoder2(0.0)
  , encoder3(0.0)
  , encoder4(0.0)
  , direction1(false)
  , direction2(false)
  , direction3(false)
  , direction4(false)
  {
  }

  typedef double _encoder1_type;
  double encoder1;

  typedef double _encoder2_type;
  double encoder2;

  typedef double _encoder3_type;
  double encoder3;

  typedef double _encoder4_type;
  double encoder4;

  typedef uint8_t _direction1_type;
  uint8_t direction1;

  typedef uint8_t _direction2_type;
  uint8_t direction2;

  typedef uint8_t _direction3_type;
  uint8_t direction3;

  typedef uint8_t _direction4_type;
  uint8_t direction4;


  typedef boost::shared_ptr< ::GCRobotics::Encoder_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::GCRobotics::Encoder_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Encoder_msg
typedef  ::GCRobotics::Encoder_msg_<std::allocator<void> > Encoder_msg;

typedef boost::shared_ptr< ::GCRobotics::Encoder_msg> Encoder_msgPtr;
typedef boost::shared_ptr< ::GCRobotics::Encoder_msg const> Encoder_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::GCRobotics::Encoder_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::GCRobotics::Encoder_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace GCRobotics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::GCRobotics::Encoder_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::GCRobotics::Encoder_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::GCRobotics::Encoder_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1f3c9338c8adf9eef290f5ae7c5d32ec";
  }

  static const char* value(const  ::GCRobotics::Encoder_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1f3c9338c8adf9eeULL;
  static const uint64_t static_value2 = 0xf290f5ae7c5d32ecULL;
};

template<class ContainerAllocator>
struct DataType< ::GCRobotics::Encoder_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "GCRobotics/Encoder_msg";
  }

  static const char* value(const  ::GCRobotics::Encoder_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::GCRobotics::Encoder_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 encoder1\n\
float64 encoder2\n\
float64 encoder3\n\
float64 encoder4\n\
\n\
bool direction1\n\
bool direction2\n\
bool direction3\n\
bool direction4\n\
\n\
";
  }

  static const char* value(const  ::GCRobotics::Encoder_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::GCRobotics::Encoder_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::GCRobotics::Encoder_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.encoder1);
    stream.next(m.encoder2);
    stream.next(m.encoder3);
    stream.next(m.encoder4);
    stream.next(m.direction1);
    stream.next(m.direction2);
    stream.next(m.direction3);
    stream.next(m.direction4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Encoder_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::GCRobotics::Encoder_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::GCRobotics::Encoder_msg_<ContainerAllocator> & v) 
  {
    s << indent << "encoder1: ";
    Printer<double>::stream(s, indent + "  ", v.encoder1);
    s << indent << "encoder2: ";
    Printer<double>::stream(s, indent + "  ", v.encoder2);
    s << indent << "encoder3: ";
    Printer<double>::stream(s, indent + "  ", v.encoder3);
    s << indent << "encoder4: ";
    Printer<double>::stream(s, indent + "  ", v.encoder4);
    s << indent << "direction1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction1);
    s << indent << "direction2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction2);
    s << indent << "direction3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction3);
    s << indent << "direction4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction4);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GCROBOTICS_MESSAGE_ENCODER_MSG_H

