/* Auto-generated by genmsg_cpp for file /home/gcr/GCRepo/GCRobotics/msg/command_state.msg */
#ifndef GCROBOTICS_MESSAGE_COMMAND_STATE_H
#define GCROBOTICS_MESSAGE_COMMAND_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace GCRobotics
{
template <class ContainerAllocator>
struct command_state_ {
  typedef command_state_<ContainerAllocator> Type;

  command_state_()
  : state(0)
  , mask_odom(false)
  {
  }

  command_state_(const ContainerAllocator& _alloc)
  : state(0)
  , mask_odom(false)
  {
  }

  typedef int32_t _state_type;
  int32_t state;

  typedef uint8_t _mask_odom_type;
  uint8_t mask_odom;


  typedef boost::shared_ptr< ::GCRobotics::command_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::GCRobotics::command_state_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct command_state
typedef  ::GCRobotics::command_state_<std::allocator<void> > command_state;

typedef boost::shared_ptr< ::GCRobotics::command_state> command_statePtr;
typedef boost::shared_ptr< ::GCRobotics::command_state const> command_stateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::GCRobotics::command_state_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::GCRobotics::command_state_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace GCRobotics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::GCRobotics::command_state_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::GCRobotics::command_state_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::GCRobotics::command_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d27b4cb082b2e43166c03ade3dc51539";
  }

  static const char* value(const  ::GCRobotics::command_state_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd27b4cb082b2e431ULL;
  static const uint64_t static_value2 = 0x66c03ade3dc51539ULL;
};

template<class ContainerAllocator>
struct DataType< ::GCRobotics::command_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "GCRobotics/command_state";
  }

  static const char* value(const  ::GCRobotics::command_state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::GCRobotics::command_state_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 state\n\
bool mask_odom\n\
\n\
";
  }

  static const char* value(const  ::GCRobotics::command_state_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::GCRobotics::command_state_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::GCRobotics::command_state_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.mask_odom);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct command_state_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::GCRobotics::command_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::GCRobotics::command_state_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "mask_odom: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mask_odom);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GCROBOTICS_MESSAGE_COMMAND_STATE_H

