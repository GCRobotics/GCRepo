/* Auto-generated by genmsg_cpp for file /home/josh/GCRepo/GCRobotics/msg/i2cData.msg */
#ifndef GCROBOTICS_MESSAGE_I2CDATA_H
#define GCROBOTICS_MESSAGE_I2CDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace GCRobotics
{
template <class ContainerAllocator>
struct i2cData_ {
  typedef i2cData_<ContainerAllocator> Type;

  i2cData_()
  : address(0)
  , messageType(0)
  , messageData(0)
  , expectDataBack(false)
  {
  }

  i2cData_(const ContainerAllocator& _alloc)
  : address(0)
  , messageType(0)
  , messageData(0)
  , expectDataBack(false)
  {
  }

  typedef uint8_t _address_type;
  uint8_t address;

  typedef uint8_t _messageType_type;
  uint8_t messageType;

  typedef uint8_t _messageData_type;
  uint8_t messageData;

  typedef uint8_t _expectDataBack_type;
  uint8_t expectDataBack;


  typedef boost::shared_ptr< ::GCRobotics::i2cData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::GCRobotics::i2cData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct i2cData
typedef  ::GCRobotics::i2cData_<std::allocator<void> > i2cData;

typedef boost::shared_ptr< ::GCRobotics::i2cData> i2cDataPtr;
typedef boost::shared_ptr< ::GCRobotics::i2cData const> i2cDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::GCRobotics::i2cData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::GCRobotics::i2cData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace GCRobotics

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::GCRobotics::i2cData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::GCRobotics::i2cData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::GCRobotics::i2cData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c17484e7b26b31d2a1c50a7b05afae82";
  }

  static const char* value(const  ::GCRobotics::i2cData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc17484e7b26b31d2ULL;
  static const uint64_t static_value2 = 0xa1c50a7b05afae82ULL;
};

template<class ContainerAllocator>
struct DataType< ::GCRobotics::i2cData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "GCRobotics/i2cData";
  }

  static const char* value(const  ::GCRobotics::i2cData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::GCRobotics::i2cData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 address\n\
uint8 messageType\n\
uint8 messageData\n\
bool expectDataBack\n\
\n\
";
  }

  static const char* value(const  ::GCRobotics::i2cData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::GCRobotics::i2cData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::GCRobotics::i2cData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.address);
    stream.next(m.messageType);
    stream.next(m.messageData);
    stream.next(m.expectDataBack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct i2cData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::GCRobotics::i2cData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::GCRobotics::i2cData_<ContainerAllocator> & v) 
  {
    s << indent << "address: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.address);
    s << indent << "messageType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.messageType);
    s << indent << "messageData: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.messageData);
    s << indent << "expectDataBack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.expectDataBack);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GCROBOTICS_MESSAGE_I2CDATA_H

