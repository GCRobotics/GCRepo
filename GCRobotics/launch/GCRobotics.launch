<launch>

<node pkg="nodelet" type="nodelet" name="openni_manager" output="screen" respawn="true" args="manager"/>
  
  
<!-- Motion Control node - Convert Velocity message to i2c messages for i2cNode to send -->
<node name="motorControlNode" pkg="GCRobotics" type="motorControlNode" />

<!-- Dead Reakoning - Create Pose based only off of /Velocity topic (dead reckoning) -->
<!-- <node name="DeadReckoner" pkg="GCRobotics" type="DeadReckoner" /> -->

<!-- Openni - Kinect pointcloud generation, from openni package -->
<include file="$(find freenect_launch)/launch/freenect.launch" />

<!-- PUT REAL DATA FOR THIS TRANSFORM!!!!!!!!!!! -->
<node pkg="tf" type="static_transform_publisher" name="base_to_kinect_broadcaster" args="0 0 0 0 0 0 /base_link /camera_depth_frame 100" />


<!-- Prep for laser scan -->
<node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet openni_manager" respawn="true">
  <param name="max_rate" value="20"/>
  <remap from="cloud_in" to="/camera/depth/points"/>
    <param name="output_frame_id" value="/base_link"/>
    <remap from="image" to="/camera/depth/image_raw"/>
</node>
 

<!-- Odometry - Generate position data from encoders -->
<node name="odometryNode" pkg="GCRobotics" type="odometryNode" />


<!-- rosserial - take in arduino data -->


<!-- GMapping - generate occ grid from laserscan -->
<!-- <include file="$(find GCRobotics)/launch/gmapping.launch" /> -->

<!-- Global Path Planning -->
<!-- <node name="GlobalPlanner" pkg="GCRobotics" type="GlobalPlanner" /> -->
	
<!-- Local Path Planning -->
<!-- <node name="LocalPlanner" pkg="GCRobotics" type="LocalPlanner" /> -->


</launch>
