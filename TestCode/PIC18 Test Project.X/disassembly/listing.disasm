Disassembly Listing for PIC18 Test Project
Generated From:
C:/Users/Alan/Documents/Local Senior Design/Repos/GCRepo/TestCode/PIC18 Test Project.X/dist/default/debug/PIC18_Test_Project.X.debug.cof
Apr 17, 2013 10:44:18 AM

---  C:/Users/Alan/Documents/Local Senior Design/Repos/GCRepo/TestCode/PIC18 Test Project.X/pic18test_main.c
1:             
2:             /* Alan Hale III
3:              * GCRobotics
4:              *
5:              * 2013/4/17
6:              *
7:              * Code to test PIC18F45K20
8:              *
9:              */
10:            
11:            #include <pic18f45k20.h>
12:            
13:            
14:            // PIC18F45K20 Configuration Bit Settings
15:            
16:            // CONFIG1H
17:            #pragma config FOSC = INTIO67   // Oscillator Selection bits (Internal oscillator block, port function on RA6 and RA7)
18:            #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
19:            #pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)
20:            
21:            // CONFIG2L
22:            #pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
23:            #pragma config BOREN = OFF      // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
24:            #pragma config BORV = 30        // Brown Out Reset Voltage bits (VBOR set to 3.0 V nominal)
25:            
26:            // CONFIG2H
27:            #pragma config WDTEN = OFF      // Watchdog Timer Enable bit (WDT is controlled by SWDTEN bit of the WDTCON register)
28:            #pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)
29:            
30:            // CONFIG3H
31:            #pragma config CCP2MX = PORTC   // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
32:            #pragma config PBADEN = ON      // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
33:            #pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
34:            #pragma config HFOFST = ON      // HFINTOSC Fast Start-up (HFINTOSC starts clocking the CPU without waiting for the oscillator to stablize.)
35:            #pragma config MCLRE = OFF      // MCLR Pin Enable bit (RE3 input pin enabled; MCLR disabled)
36:            
37:            // CONFIG4L
38:            #pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
39:            #pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
40:            #pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))
41:            
42:            // CONFIG5L
43:            #pragma config CP0 = OFF        // Code Protection Block 0 (Block 0 (000800-001FFFh) not code-protected)
44:            #pragma config CP1 = OFF        // Code Protection Block 1 (Block 1 (002000-003FFFh) not code-protected)
45:            #pragma config CP2 = OFF        // Code Protection Block 2 (Block 2 (004000-005FFFh) not code-protected)
46:            #pragma config CP3 = OFF        // Code Protection Block 3 (Block 3 (006000-007FFFh) not code-protected)
47:            
48:            // CONFIG5H
49:            #pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
50:            #pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)
51:            
52:            // CONFIG6L
53:            #pragma config WRT0 = OFF       // Write Protection Block 0 (Block 0 (000800-001FFFh) not write-protected)
54:            #pragma config WRT1 = OFF       // Write Protection Block 1 (Block 1 (002000-003FFFh) not write-protected)
55:            #pragma config WRT2 = OFF       // Write Protection Block 2 (Block 2 (004000-005FFFh) not write-protected)
56:            #pragma config WRT3 = OFF       // Write Protection Block 3 (Block 3 (006000-007FFFh) not write-protected)
57:            
58:            // CONFIG6H
59:            #pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
60:            #pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0007FFh) not write-protected)
61:            #pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
62:            
63:            // CONFIG7L
64:            #pragma config EBTR0 = OFF      // Table Read Protection Block 0 (Block 0 (000800-001FFFh) not protected from table reads executed in other blocks)
65:            #pragma config EBTR1 = OFF      // Table Read Protection Block 1 (Block 1 (002000-003FFFh) not protected from table reads executed in other blocks)
66:            #pragma config EBTR2 = OFF      // Table Read Protection Block 2 (Block 2 (004000-005FFFh) not protected from table reads executed in other blocks)
67:            #pragma config EBTR3 = OFF      // Table Read Protection Block 3 (Block 3 (006000-007FFFh) not protected from table reads executed in other blocks)
68:            
69:            // CONFIG7H
70:            #pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)
71:            
72:            
73:            
74:            
75:            
76:            void delay1sec();
77:            
78:            int main()
79:            {
80:                GIE = 0;
7C6A  9EF2     BCF INTCON, 7, ACCESS
81:                T0CON = 0b11010111;
7C6C  0ED7     MOVLW 0xD7
7C6E  6ED5     MOVWF T0CON, ACCESS
82:                TRISD = 0x00;
7C70  0E00     MOVLW 0x0
7C72  6E95     MOVWF TRISD, ACCESS
83:                PORTD = 0xFF;
7C74  6883     SETF PORTD, ACCESS
84:            
85:                TMR0 = 0;
7C76  0E00     MOVLW 0x0
7C78  6ED7     MOVWF TMR0H, ACCESS
7C7A  0E00     MOVLW 0x0
7C7C  6ED6     MOVWF TMR0L, ACCESS
86:            
87:                int x = 0;
7C7E  0E00     MOVLW 0x0
7C80  6E06     MOVWF 0x6, ACCESS
7C82  0E00     MOVLW 0x0
7C84  6E05     MOVWF x, ACCESS
7C86  D000     BRA 0x7C88
88:            
89:                while(1)
7C96  D7F8     BRA 0x7C88
90:                {
91:                    PORTD = x;
7C88  C005     MOVFF x, PORTD
7C8A  FF83     NOP
92:                    x++;
7C8C  4A05     INFSNZ x, F, ACCESS
7C8E  2A06     INCF 0x6, F, ACCESS
93:                    delay1sec();
7C90  EC4E     CALL 0x7C9C, 0
7C92  F03E     NOP
7C94  D7F9     BRA 0x7C88
94:                }
95:            
96:            
97:                return 1;
98:            }
7C98  EF01     GOTO 0x2
99:            
100:           
101:           void delay1sec()
102:           {
103:               int i = 0, x;
7C9C  0E00     MOVLW 0x0
7C9E  6E04     MOVWF 0x4, ACCESS
7CA0  0E00     MOVLW 0x0
7CA2  6E03     MOVWF i, ACCESS
104:               for(i; i <= 50; i++)
7CA4  5004     MOVF 0x4, W, ACCESS
7CA6  0A80     XORLW 0x80
7CA8  0F80     ADDLW 0x80
7CAA  0E33     MOVLW 0x33
7CAC  B4D8     BTFSC STATUS, 2, ACCESS
7CAE  5C03     SUBWF i, W, ACCESS
7CB0  A0D8     BTFSS STATUS, 0, ACCESS
7CB2  D001     BRA 0x7CB6
7CB4  D001     BRA 0x7CB8
7CB6  D009     BRA 0x7CCA
7CB8  D01E     BRA 0x7CF6
7CBA  D01D     BRA 0x7CF6
7CDC  4A03     INFSNZ i, F, ACCESS
7CDE  2A04     INCF 0x4, F, ACCESS
7CE0  5004     MOVF 0x4, W, ACCESS
7CE2  0A80     XORLW 0x80
7CE4  0F80     ADDLW 0x80
7CE6  0E33     MOVLW 0x33
7CE8  B4D8     BTFSC STATUS, 2, ACCESS
7CEA  5C03     SUBWF i, W, ACCESS
7CEC  A0D8     BTFSS STATUS, 0, ACCESS
7CEE  D001     BRA 0x7CF2
7CF0  D001     BRA 0x7CF4
7CF2  D7EB     BRA 0x7CCA
7CF4  D000     BRA 0x7CF6
105:               {
106:                   while (TMR0IF == 0)
7CBC  D006     BRA 0x7CCA
7CCA  A4F2     BTFSS INTCON, 2, ACCESS
7CCC  D001     BRA 0x7CD0
7CCE  D001     BRA 0x7CD2
7CD0  D7F6     BRA 0x7CBE
107:                   {
108:                       i++;
7CBE  4A03     INFSNZ i, F, ACCESS
7CC0  2A04     INCF 0x4, F, ACCESS
109:                       i--;
7CC2  0603     DECF i, F, ACCESS
7CC4  A0D8     BTFSS STATUS, 0, ACCESS
7CC6  0604     DECF 0x4, F, ACCESS
7CC8  D000     BRA 0x7CCA
110:                   }
111:                   TMR0IF = 0;
7CD2  94F2     BCF INTCON, 2, ACCESS
112:           
113:                   x = 3;
7CD4  0E00     MOVLW 0x0
7CD6  6E02     MOVWF 0x2, ACCESS
7CD8  0E03     MOVLW 0x3
7CDA  6E01     MOVWF x, ACCESS
114:               }
115:           
116:               i = 0;
7CF6  0E00     MOVLW 0x0
7CF8  6E04     MOVWF 0x4, ACCESS
7CFA  0E00     MOVLW 0x0
7CFC  6E03     MOVWF i, ACCESS
117:           
118:           }
7CFE  0012     RETURN 0
